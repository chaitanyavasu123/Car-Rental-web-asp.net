// <auto-generated />
using System;
using DataAccessLayer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessLogicLayer.Models.Admin", b =>
                {
                    b.Property<string>("email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("email");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            email = "admin1@admin.com",
                            Password = "Admin1"
                        });
                });

            modelBuilder.Entity("BusinessLogicLayer.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<bool>("IsReturning")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RentalTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Returned")
                        .HasColumnType("bit");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("BusinessLogicLayer.Models.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Maker")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RentalPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsAvailable = true,
                            Maker = "Toyota",
                            Model = "Camry",
                            RentalPrice = 50.00m
                        },
                        new
                        {
                            Id = 2,
                            IsAvailable = true,
                            Maker = "Honda",
                            Model = "Civic",
                            RentalPrice = 45.00m
                        },
                        new
                        {
                            Id = 3,
                            IsAvailable = true,
                            Maker = "Toyota",
                            Model = "Camry",
                            RentalPrice = 55.00m
                        },
                        new
                        {
                            Id = 4,
                            IsAvailable = true,
                            Maker = "Honda",
                            Model = "Civic",
                            RentalPrice = 50.00m
                        },
                        new
                        {
                            Id = 5,
                            IsAvailable = true,
                            Maker = "Ford",
                            Model = "Fusion",
                            RentalPrice = 60.00m
                        },
                        new
                        {
                            Id = 6,
                            IsAvailable = true,
                            Maker = "Nissan",
                            Model = "Altima",
                            RentalPrice = 55.00m
                        },
                        new
                        {
                            Id = 7,
                            IsAvailable = true,
                            Maker = "Toyota",
                            Model = "Corolla",
                            RentalPrice = 45.00m
                        },
                        new
                        {
                            Id = 8,
                            IsAvailable = true,
                            Maker = "Honda",
                            Model = "Accord",
                            RentalPrice = 65.00m
                        },
                        new
                        {
                            Id = 9,
                            IsAvailable = true,
                            Maker = "Ford",
                            Model = "Escape",
                            RentalPrice = 70.00m
                        },
                        new
                        {
                            Id = 10,
                            IsAvailable = true,
                            Maker = "Nissan",
                            Model = "Maxima",
                            RentalPrice = 75.00m
                        });
                });

            modelBuilder.Entity("BusinessLogicLayer.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Receiver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("BusinessLogicLayer.Models.User", b =>
                {
                    b.Property<string>("email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("email");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            email = "user1@gmail.com",
                            Password = "User1"
                        },
                        new
                        {
                            email = "user2@gmail.com",
                            Password = "User2"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
